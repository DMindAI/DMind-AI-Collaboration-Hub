name: Collaboration Handler

permissions:
  contents: write
  issues: write

on:
  issues:
    types: [opened, edited, labeled]

jobs:
  validate-issue:
    if: startsWith(github.event.issue.title, '[Collaboration]')
    runs-on: ubuntu-latest
    steps:
      - name: Validate Issue
        run: |
          BODY="$(jq -r .issue.body < $GITHUB_EVENT_PATH)"
          echo "ISSUE BODY:"
          echo "$BODY"

          extract_field() {
            local field="$1"
            echo "$BODY" | awk -v key="$field" '
              BEGIN {found=0}
              tolower($0) ~ key {
                found=1; next
              }
              found && NF {
                print $0; exit
              }
            ' | xargs
          }

          PROJECT_NAME=$(extract_field "project name")
          PROJECT_URL=$(extract_field "project url")
          DESCRIPTION=$(extract_field "project description")
          LOGO_URL=$(extract_field "logo url")

          echo "Extracted PROJECT_NAME: $PROJECT_NAME"
          echo "Extracted PROJECT_URL: $PROJECT_URL"
          echo "Extracted DESCRIPTION: $DESCRIPTION"
          echo "Extracted LOGO_URL: $LOGO_URL"

          if [ -z "$PROJECT_NAME" ]; then
            echo "Error: Project name is required"
            exit 1
          fi
          if [ -z "$PROJECT_URL" ]; then
            echo "Error: Project URL is required"
            exit 1
          fi
          if [ -z "$DESCRIPTION" ]; then
            echo "Error: Description is required"
            exit 1
          fi
          if [ -z "$LOGO_URL" ]; then
            echo "Error: Logo URL is required"
            exit 1
          fi

  process-approved:
    needs: validate-issue
    if: contains(github.event.issue.labels.*.name, 'approved')
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
      - name: Install dependencies
        run: npm install
      - name: Process Collaboration
        run: |
          ISSUE_NUMBER="${{ github.event.issue.number }}"
          ISSUE_CREATED_AT="${{ github.event.issue.created_at }}"

          # Create directories with proper permissions
          mkdir -p collaborators/logos
          chmod -R 755 collaborators

          BODY="$(jq -r .issue.body < $GITHUB_EVENT_PATH)"
          echo "ISSUE BODY:"
          echo "$BODY"

          extract_field() {
            local field="$1"
            echo "$BODY" | awk -v key="$field" '
              BEGIN {found=0}
              tolower($0) ~ key {
                found=1; next
              }
              found && NF {
                print $0; exit
              }
            ' | xargs
          }

          PROJECT_NAME=$(extract_field "project name")
          PROJECT_URL=$(extract_field "project url")
          DESCRIPTION=$(extract_field "project description")
          LOGO_URL=$(extract_field "logo url")

          echo "Extracted PROJECT_NAME: $PROJECT_NAME"
          echo "Extracted PROJECT_URL: $PROJECT_URL"
          echo "Extracted DESCRIPTION: $DESCRIPTION"
          echo "Extracted LOGO_URL: $LOGO_URL"

          # Validate logo URL
          if ! echo "$LOGO_URL" | grep -E -q '^https?://.*\.(png|jpg|jpeg|svg)$'; then
            echo "Error: Logo URL must be a valid image URL (png, jpg, jpeg, svg)"
            exit 1
          fi

          # Download logo with verbose output
          EXT="${LOGO_URL##*.}"
          echo "Downloading logo to: collaborators/logos/${ISSUE_NUMBER}.${EXT}"
          curl -L -v -o "collaborators/logos/${ISSUE_NUMBER}.${EXT}" "$LOGO_URL"
          DOWNLOAD_STATUS=$?
          
          # Verify file exists and has content
          if [ -f "collaborators/logos/${ISSUE_NUMBER}.${EXT}" ]; then
            echo "File downloaded successfully. Size: $(stat -f%z "collaborators/logos/${ISSUE_NUMBER}.${EXT}") bytes"
          else
            echo "Error: File not found after download attempt"
            exit 1
          fi

          if [ $DOWNLOAD_STATUS -ne 0 ]; then
            echo "Error: Failed to download logo image"
            exit 1
          fi

          # Create or update collaborators.json
          COLLABORATORS_FILE="collaborators/collaborators.json"
          
          # Initialize file if it doesn't exist
          if [ ! -f "$COLLABORATORS_FILE" ]; then
            echo '{"collaborators": []}' > "$COLLABORATORS_FILE"
          fi
          
          # Add new collaborator
          NEW_COLLABORATOR=$(cat <<EOF
          {
            "name": "$PROJECT_NAME",
            "url": "$PROJECT_URL",
            "description": "$DESCRIPTION",
            "logo": {
              "url": "$LOGO_URL"
            },
            "addedAt": "$ISSUE_CREATED_AT",
            "featured": false
          }
EOF
          )
          
          # Update collaborators.json
          jq --argjson new "$NEW_COLLABORATOR" '.collaborators += [$new]' "$COLLABORATORS_FILE" > "${COLLABORATORS_FILE}.tmp"
          mv "${COLLABORATORS_FILE}.tmp" "$COLLABORATORS_FILE"

          node scripts/update-website.js

          git config --global user.name 'GitHub Action'
          git config --global user.email 'action@github.com'
          git add .
          git commit -m "Add collaborator: $PROJECT_NAME"
          git push 